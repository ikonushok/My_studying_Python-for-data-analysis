{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Копия блокнота \"ДЗ-2.8.2-Light.ipynb\"","provenance":[{"file_id":"1uWjVoHiJ54nO204120x5iSWw1N8kTBbe","timestamp":1594712863287}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"MH-3kVwvJYeP","colab_type":"text"},"source":["# Курс \"Python для анализа данных\"\n","\n","---\n","# Домашнее задание LIGHT\n","#2.8.2 Создание собственных классов"]},{"cell_type":"code","metadata":{"id":"fGNSU6VDMU7f","colab_type":"code","colab":{}},"source":["# Запустите код ниже для старта, но не правьте во избежании ошибок проверки!\n","_HOMEWORK_NAME_ = '2.8.2_LIGHT'\n","_HOMEWORK_ANSWER_DICT_ = dict()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xp_DlvMXJ8Ed","colab_type":"text"},"source":["## ФИО участника"]},{"cell_type":"code","metadata":{"id":"RHUt9t1XMw9a","colab_type":"code","colab":{}},"source":["# Введите ваше имя и фамилию в соответствующую позицию 'NAME' и 'LAST_NAME'!\n","# Пример: Иван Иванов - 'NAME' : 'Иван', 'LAST_NAME' : 'Иванов'\n","_NAME_SERNAME_ = {\n","    'NAME' : 'ILIA',\n","    'LAST_NAME' : 'KONUSHOK'\n","}"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"gMwyKhlQJ1mf","colab_type":"text"},"source":["## Задание 1"]},{"cell_type":"markdown","metadata":{"id":"Owu684lKKrjJ","colab_type":"text"},"source":["**Условие:** Создайте собственный класс ```Person``` работника компании. Добавьте следующие атрибуты данных, использую конструктор ```__init__```:\n","\n","*   ```name```(фамилия)\n","*   ```job```(должность)\n","*   ```pai```(зарплата)\n","\n","Создайте метод класса ```person_raise(self, prcnt)```, который повышает зарплату на ```prcnt``` процентов от имеющегося значения. Создайте работника и выведите кортеж с 2мя значениями: (зарплата при создании работника, зарплата после повышения на 20%)\n","\n","**Формат ответа:** кортеж (например, ```(150, 200)```)\n","\n","**Оценка в баллах:** 3"]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"ESSLfwqEPKKn"},"source":["**Решение:**"]},{"cell_type":"code","metadata":{"id":"G-m8Nrr5AvOL","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":102},"executionInfo":{"status":"ok","timestamp":1594814597674,"user_tz":-180,"elapsed":16544,"user":{"displayName":"Ilia Konushok","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgUrzLbotAvEh6mMq5H6nX20COBH_r_qBrlpfSYQ=s64","userId":"00607095919891895402"}},"outputId":"7c876173-7e96-451c-aa48-30de800d026c"},"source":["# Создаем класс сотрудников\n","class Person:\n","  # создаем атрибуты класса\n","  def __init__(self):\n","    self.name = 'Фамилия'\n","    self.job = 'Должность'\n","    self.pai = 'Зарплата'\n","\n","  # создание методов класса\n","  def person_raise(self, prcnt):\n","    vedomost = (int(pers1.pai), int(float(pers1.pai)*(1+prcnt)))\n","    print ('Ответ: ', vedomost)\n","    pers1.pai = int(float(pers1.pai)*(1+prcnt)) # повышаем зарплату pers1\n","\n","\n","# Создаем конкретный экземпляр класса\n","pers1 = Person()\n","pers1.name = input ('Введите фамилию: ')\n","pers1.job = input ('Введите должность: ')\n","pers1.pai = input ('Введите зарплату: ')\n","print(pers1.name, pers1.job, pers1.pai)\n","\n","# Применяем метод  - индексируем зарплату \n","prcnt = 0.2\n","pers1.person_raise(prcnt)\n","\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Введите фамилию: Иванов\n","Введите должность: программист\n","Введите зарплату: 100000\n","Иванов программист 100000\n","Ответ:  (100000, 120000)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"2TLO2AdzR6WI","colab_type":"text"},"source":["**Ответ:**"]},{"cell_type":"code","metadata":{"id":"ydAqEYQBAu5Y","colab_type":"code","colab":{}},"source":["# Не изменяйте текст до знака = во избежании ошибок проверки!\n","_HOMEWORK_ANSWER_DICT_['A1'] = (100000, 120000)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"g5S0h2-wKfGE"},"source":["## Задание 2"]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"orX7BUzcPKKf"},"source":["**Условие:** Создайте класс ```Manager``` наследника класса ```Person```, который имеет дополнительный атрибут данных ```client_counts```(количество клиентов). В классе ```Manager``` создайте метод ```manager_raise()```, который \n","увеличивает количество клиентов менеджера на 1 и зарплату менеджера на 1%. Выведите кортеж с 2мя значениями: (зарплата менеджера при создании, зарплата после добавления 10 клиентов). Замечание: зарплата менеджера должна быть повышена с использованием методов наследуемого класса.\n","\n","**Формат ответа:** кортеж (например, ```(150, 170)```)\n","\n","**Оценка в баллах:** 3 "]},{"cell_type":"markdown","metadata":{"id":"OCTvo3fHLaaJ","colab_type":"text"},"source":["**Решение:**"]},{"cell_type":"code","metadata":{"id":"f9_8IGndLeRO","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":68},"executionInfo":{"status":"ok","timestamp":1594814765972,"user_tz":-180,"elapsed":5844,"user":{"displayName":"Ilia Konushok","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgUrzLbotAvEh6mMq5H6nX20COBH_r_qBrlpfSYQ=s64","userId":"00607095919891895402"}},"outputId":"91f2d465-4b1f-4329-ca86-4932bed01b06"},"source":["class Manager(Person):\n","  # добавляем атрибут класса\n","  def __init__(self):\n","    self.client_counts = 'Количество клиентов'\n","  \n","  # создание метода класса\n","  def manager_raise(self, clients_number, per_clent_index):\n","    vedomost_2 = (int(pers1.pai), int(float(pers1.pai) * ( 1 + clients_number*per_clent_index)))\n","    print ('Ответ: ', vedomost_2)\n","    pers1.pai = int(float(pers1.pai) * ( 1 + clients_number*per_clent_index)) # повышаем зарплату pers1\n","  \n","print(pers1.name, pers1.job, pers1.pai)\n","\n","# Применяем метод  - индексируем зарплату\n","manager1 = Manager()\n","clients_number = int(input('Введите число клиентов: '))\n","per_clent_index = 0.01\n","manager1.manager_raise(clients_number, per_clent_index)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Иванов программист 120000\n","Введите число клиентов: 10\n","Ответ:  (120000, 132000)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"Trvrl2qPPKKx"},"source":["**Ответ:**"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"iiWu4IpuKfxV","colab":{}},"source":["# Не изменяйте текст до знака = во избежании ошибок проверки!\n","_HOMEWORK_ANSWER_DICT_['A2'] = (120000, 132000)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"kiKkFcn6KQFA","colab_type":"text"},"source":["## Комментарии участника"]},{"cell_type":"code","metadata":{"id":"3aI3lBQVdvaY","colab_type":"code","colab":{}},"source":["_YOUR_COMMENT_ = 'All right!'"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"TvzA7RQXcywE","colab_type":"text"},"source":["## Создание отчета"]},{"cell_type":"code","metadata":{"id":"y-d24eqmdn4x","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1594814886329,"user_tz":-180,"elapsed":1254,"user":{"displayName":"Ilia Konushok","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgUrzLbotAvEh6mMq5H6nX20COBH_r_qBrlpfSYQ=s64","userId":"00607095919891895402"}},"outputId":"e59cb4e1-cd70-4142-89bb-43693c6bcbf2"},"source":["# Проверьте правильность заполнения полей выше и \n","# выполните данный код для создания отчета\n","# и сохранения его на локальную машину\n","from google.colab import files\n","import json\n","try:\n","  # form a report\n","  _HM_REPORT_ = {'Answers':_HOMEWORK_ANSWER_DICT_,\n","                'Comment':_YOUR_COMMENT_,\n","                'User':_NAME_SERNAME_,\n","                }\n","\n","  # create a report name\n","  _REPORT_NAME_ = 'HM_' +\\\n","                    _HOMEWORK_NAME_ + \\\n","                  '_by_' + \\\n","                  _NAME_SERNAME_['LAST_NAME'] + \\\n","                  '.json'\n","  \n","  # Save a report to a file\n","  f = open(_REPORT_NAME_,\"w\")\n","  f.write(json.dumps(_HM_REPORT_))\n","  f.close()\n","\n","  # Donwnload the file into a local host\n","  files.download(_REPORT_NAME_) \n","  print('Thanks for the work, {name}!'.format(name=_NAME_SERNAME_['NAME']))\n","except Exception as error:\n","   print(error)\n","   print('Something went wrong! Check the data entry and try again!')"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/javascript":["download(\"download_7c53ad95-d830-453d-ae6f-3af7f8eecb11\", \"HM_2.8.2_LIGHT_by_KONUSHOK.json\", 137)"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Thanks for the work, ILIA!\n"],"name":"stdout"}]}]}